Embedded 
21/02/2024

Serial communication- at a time when(8 bit)
Parallel Communication- at same time (8 bit)

MSB-Most Significant Bit
LSB-Least Significant Bit
(Protocol Decides which one go to first)

Bit rate(Efficiency)-per second (frequency of clock)Time
Baud rate(Transmission)-Transmit speed (data per sec)Space

UART
USART
Duplex-Transmit/Receive
Simplex-Only Transmit/only receive
Half Duplex - One way at a time 
Full Duplex-Both ways at a time

UART
-Start and Stop
-1 bit at start- value of start 0(always)
-Stop 1 or 2 bit - value of stop always 1

Parity:
-Odd/Even
-Error Checking

Mode:
RX/TX

Word length:
8 bits/9 bits

Sir-16 MHz



Program UART:
#include "stm32f4xx.h"
#include <stdint.h>
#include <string.h>

#define    GPIOAEN     (1U<<0)
#define    PA2MOD      (2U<<4)
#define    PA2AF       (7U<<8)
#define    APB1EN      (1U<<17)
#define    USART2_TX    (1U<<3)
#define    USART2EN     (1U<<13)
#define    SR_TXE       (1U<<7)


#define SYS_FREQ		16000000
#define APB1_CLK		SYS_FREQ

#define UART_BAUDRATE	115200


void uart2_init(void);
void uart2_write(const char *str);

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

int main()
{

	uart2_init();
	while(1)
	{
		const char *mystr =â€œGautham \r \n";
		uart2_write(mystr);


	}
	return 0;
}


void uart2_init(void)
{

	/*****Configure uart gpio pin******/
		/*Enable clock access to gpioa */
		RCC->AHB1ENR |= GPIOAEN;

		/Set PA2 mode to alternate function mode/
		GPIOA->MODER  |= PA2MOD;

		/Set PA2 alternate function type to UART_TX (AF07)/
        GPIOA->AFR[0] |= PA2AF;

		/*****Configure uart module ******/
		/*Enable clock access to uart2 */
         RCC->APB1ENR |= APB1EN;

		/Configure baudrate/
		uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
		//USART2->BRR = ((APB1_CLK + (BaudRate/2U))/BaudRate) ;

		/Configure the transfer direction/
		USART2->CR1 = USART2_TX;

		/Enable uart module/
        USART2->CR1 |= USART2EN;

}






static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
}






void uart2_write(const char *str)
{
	for (int i=0;i< strlen(str);i++){

		USART2->DR	=  (str[i] & 0xFF);
		while(!(USART2->SR & SR_TXE)){

		}

	}
  /Make sure the transmit data register is empty/


  /Write to transmit data register/

}